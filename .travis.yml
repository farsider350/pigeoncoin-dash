# errata:
# - A travis bug causes caches to trample eachother when using the same
#   compiler key (which we don't use anyway). This is worked around for now by
#   replacing the "compilers" with a build name prefixed by the no-op ":"
#   command. See: https://github.com/travis-ci/travis-ci/issues/4393
# - sudo/dist/group are set so as to get Blue Box VMs, necessary for [loopback]
#   IPv6 support

sudo: required
dist: bionic

os: linux
language: generic

cache:
  apt: true
  ccache: true
  directories:
    - depends/built
    - depends/sdk-sources
    - $HOME/.ccache

env:
  global:
    # DOCKER_HUB_USER
    - secure: "J0T+zrRBBzBnxoioCD378cRSJUF8Vms32QMmrENVVfuJl03oBQv0QxSatLEiD4PtRPrN00mJ8/k/HdqFQ0SN1yg6a00duOZ6C9jk6t/fExBO1LNhp3Z7lcaMUrNEyRN6sgfVeznDVTGj9jBQU2HNlwHk0UD9BNp/k+Bjhrtw7Njp9JTLZKBgxrXk0WZmfk0d75Q+9DajA1j2tSfWVpwzv6HMGfqIH1wsVEakBY+tnaE6EO3IdzdWHhf/iV+Tx0tL0Qz/6mejgSuoGLTJLmeTrceTTmsDlN3B95y+XfcYDs6EP7gpzN8Ffg/mLV8xJ2Myj7+b1o+smMJZE5tLuPIeAu0YsfkPNa/tNLotOlDxF72per0kXyNYbRf+JrpxiOu9pLCtdtd40V2SsiNhpQqHVy+b+wkkqo2syTHT+9UNkqEi3WFm6TqFuOeQNtDm6R0hRl/Talw/ZEeKs68z1Cf6VyBrZG5LqtOurtWlKwXCe/Tr1i2g4BEAcbywphtCCcfgMK9YSGQnjKkGk6k9gVEa2bneYLZz1RSh2OpXnIsIJOX7X0hNd5xtQDLgbpSUlKwVcEriWeGe12GCszKNX9gdEo2bHeq4xAJ6BE+ot745z9dc+nC2BJ6Su+I5L6zBg4m2FWn0TWhPvz/6JR26t6ls/E7m+hkwJTCHnIUiFmmzpEw="
    # DOCKER_HUB_PASSWORD
    - secure: "RLzlMhfLqwSBrZqJOVOd61suXBn+HtUR3vOZfuFYF/Qmjjj5TE41+rObZmzc54hP/ZL+OH6blnibpvfDXlX+eN38ivFQfuxkJIGL68SJsEwNBRwW39Yw6Hl5RdI41MLCH7ByN15wifLp1JKBilHJ7XGMOUjI7P0yl7JjX8GBXUCtJbVLRugo80/yn+XQ1NdnlpbpYHNjMEQFWSODPa3pSK5McWvyQjDZDgS+IkdrZmIYJPMa7bmKH5I/edUPSmXQT905FgEwq9u8XR0SyBopli21EK9l6GkXIIvmDTYz5vT26Apvi2B4Aoazlklg+KNRUJuLGerpt6kbnU0gMSUChVkFfFhOk6GRSN3a/AUfD2FOudvMhet2QvlPHx+GYdEUr5XVo5HW42pHsqfD6eDtHd8VLTsHP0q4C8V85fNMv21lkkehy2ry8fx/RRy6x4O2wg2mua+79UkGKXp75gMKzWEcth34PCFCOu37l2F8R/ANnrQ52K/8vIQ88TtU2OpYX89fHjLojBxu+WKEBGZH2LRPsZBOUHeeO5C/xKDrhZU24ORnMW8wg66Qg5GIX1KI4a8yp73Mpues5hzpJ6wkMuRrQt40ymKndLCjv8KSd+5BfP6Or/KIrzDNYdZaasjk7JNi6rcZmm9d3fTAo+Ja/mjpUCIOo3SX14luzVCJIig="
    - DOCKER_BUILD=false

stages:
  - build depends
  - build src
  - run tests
  - build docker

builddepends: &builddepends
  stage: build depends
  script:
    - $DOCKER_RUN_IN_BUILDER ./ci/build_depends.sh

buildsrc: &buildsrc
  stage: build src
  script:
    - $DOCKER_RUN_IN_BUILDER ./ci/build_depends.sh
    - $DOCKER_RUN_IN_BUILDER ./ci/build_src.sh

runtests: &runtests
  stage: run tests
  script:
    - $DOCKER_RUN_IN_BUILDER ./ci/build_depends.sh
    - $DOCKER_RUN_IN_BUILDER ./ci/build_src.sh
    - $DOCKER_RUN_IN_BUILDER ./ci/test_unittests.sh
    - if [ "$TRAVIS_EVENT_TYPE" = "cron" ]; then extended="--extended --exclude feature_pruning,feature_dbcrash"; fi
    - $DOCKER_RUN_IN_BUILDER ./ci/test_integrationtests.sh --quiet --jobs=3 ${extended}

builddocker: &builddocker
  stage: build docker
  script:
    # no need to run tests again here
    - if [ "$DOCKER_BUILD" = "true" ]; then $DOCKER_RUN_IN_BUILDER ./ci/build_depends.sh && $DOCKER_RUN_IN_BUILDER ./ci/build_src.sh && BUILD_DIR=build-ci/dashcore-$BUILD_TARGET ./docker/build-docker.sh; fi

jobs:
  include:
    # build depends
    - <<: *builddepends
      name: depends-arm-linux
      env: BUILD_TARGET=arm-linux
    - <<: *builddepends
      name: depends-win32
      env: BUILD_TARGET=win32
    - <<: *builddepends
      name: depends-win64
      env: BUILD_TARGET=win64
    - <<: *builddepends
      name: depends-linux32
      env: BUILD_TARGET=linux32
    - <<: *builddepends
      name: depends-linux64
      env: BUILD_TARGET=linux64
    - <<: *builddepends
      name: depends-linux64_nowallet
      env: BUILD_TARGET=linux64_nowallet
    - <<: *builddepends
      name: depends-linux64_release
      env:
        - BUILD_TARGET=linux64_release
        - DOCKER_BUILD=true
    - <<: *builddepends
      name: depends-mac
      env: BUILD_TARGET=mac
    # build source
    - <<: *buildsrc
      name: src-arm-linux
      env: BUILD_TARGET=arm-linux
    - <<: *buildsrc
      name: src-win32
      env: BUILD_TARGET=win32
    - <<: *buildsrc
      name: src-win64
      env: BUILD_TARGET=win64
    - <<: *buildsrc
      name: src-linux32
      env: BUILD_TARGET=linux32
    - <<: *buildsrc
      name: src-linux64
      env: BUILD_TARGET=linux64
    - <<: *buildsrc
      name: src-linux64_nowallet
      env: BUILD_TARGET=linux64_nowallet
    - <<: *buildsrc
      name: src-linux64_release
      env:
        - BUILD_TARGET=linux64_release
        - DOCKER_BUILD=true
    - <<: *buildsrc
      name: src-mac
      env: BUILD_TARGET=mac
    # run tests (no tests for arm-linux and mac)
    - <<: *runtests
      name: tests-win32
      env: BUILD_TARGET=win32
    - <<: *runtests
      name: tests-win64
      env: BUILD_TARGET=win64
    - <<: *runtests
      name: tests-linux32
      env: BUILD_TARGET=linux32
    - <<: *runtests
      name: tests-linux64
      env: BUILD_TARGET=linux64
    - <<: *runtests
      name: tests-linux64_nowallet
      env: BUILD_TARGET=linux64_nowallet
    - <<: *runtests
      name: tests-linux64_release
      env:
        - BUILD_TARGET=linux64_release
        - DOCKER_BUILD=true
    # build docker
    - <<: *builddocker
      name: docker-linux64_release
      env:
        - BUILD_TARGET=linux64_release
        - DOCKER_BUILD=true

before_cache:
  # Save builder image
  - docker save dash-builder-$BUILD_TARGET-$TRAVIS_JOB_NUMBER $(docker history -q dash-builder-$BUILD_TARGET-$TRAVIS_JOB_NUMBER | grep -v \<missing\>) | gzip -2 > $HOME/cache/docker/dash-builder-$BUILD_TARGET.tar.gz

before_install:
    - export PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
install:
    - travis_retry sudo apt-get install python3-pip
    - if [ "$PYZMQ" = "true" ]; then pip3 install pyzmq --user && pip install --user futoin-cid ; fi
    - if [ -n "$PPA" ]; then travis_retry sudo add-apt-repository "$PPA" -y; fi
    - if [ -n "$DPKG_ADD_ARCH" ]; then sudo dpkg --add-architecture "$DPKG_ADD_ARCH" ; fi
    - if [ -n "$PACKAGES" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi
before_script:
    # Make sure stdout is in blocking mode. Otherwise builds will fail due to large writes to stdout
    # See https://github.com/travis-ci/travis-ci/issues/4704. If this gets fixed, this line can also be removed.
    - python3 -c 'import os,sys,fcntl; flags = fcntl.fcntl(sys.stdout, fcntl.F_GETFL); fcntl.fcntl(sys.stdout, fcntl.F_SETFL, flags&~os.O_NONBLOCK);'
    # Build docker image only for develop branch of the main repo
    - if [ "$TRAVIS_REPO_SLUG" != "dashpay/dash" -o "$TRAVIS_BRANCH" != "develop" -o "$TRAVIS_PULL_REQUEST" != "false" ]; then export DOCKER_BUILD="false"; echo DOCKER_BUILD=$DOCKER_BUILD; fi
    # TODO: Check keys and signed commits
    #- if [ "$TRAVIS_REPO_SLUG" = "dashpay/dash" -a "$TRAVIS_PULL_REQUEST" = "false" ]; then while read LINE; do travis_retry gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys; fi
    #- if [ "$TRAVIS_REPO_SLUG" = "dashpay/dash" -a "$TRAVIS_EVENT_TYPE" = "cron" ]; then travis_wait 30 contrib/verify-commits/verify-commits.sh; fi
after_script:
    - echo $TRAVIS_COMMIT_RANGE
    - echo $TRAVIS_COMMIT_LOG
    - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then (echo "Upload goes here. Something like: scp -r $BASE_OUTDIR server" || echo "upload failed"); fi
    